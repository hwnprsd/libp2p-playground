syntax = "proto3";
import "google/api/annotations.proto";
import "proto/rule.proto";
import "proto/tx.proto";

option go_package = "./proto";


service TransactionService {
	rpc HandleTransaction(Transaction) returns (TransactionResponse){
	        option (google.api.http) = {
		    post: "/v1/transaction"
		    body: "*"
		};
	}

	rpc HandleSignatureRequest(SolaceTx) returns (TransactionResponse) {
	        option (google.api.http) = {
		    post: "/v1/sign-request"
		    body: "*"
		};
	}

	rpc HandleCreateRule(CreateRuleData) returns (TransactionResponse) {
		option (google.api.http) = {
			post: "/v1/create-rule"
			body: "*"
		};
	}

	rpc HandleMetricsQuery(Empty) returns (MetricsResponse) {
		option (google.api.http) = {
			get: "/v1/metrics"
		};
	}

	rpc HandleGenericRequest(GenericRequestData) returns (TransactionResponse) {
		option (google.api.http) = {
			post: "/v1/request"
			body: "*"
		};
	}
}

message GenericRequestData {
	string type = 1; // "nonce", "signature", "publicKey", "rulebook"
	string data = 2; // walletAddr, txHash, walletAddr, walletAddr
}

// This will be for external Http / GRPC Calls
message Transaction {
	string type = 1;
	Payload payload = 2;
}

// Easier to accept this as hex strings instead of []byte to only convert them again
message Payload {
	string walletAddress = 1;
	string data = 2;
	string signature = 3;
}

message TransactionResponse {
	bool success = 1;
	string msg = 2;
}

message CreateRuleData {
	string walletAddress = 1;
	AccessControlRule rule = 2;
	string signature = 3;
}

message MetricsResponse {
	repeated string peers = 1;
	repeated Squad squads = 2;
}

message Squad {
	string walletAddr = 1;
	repeated Signature signatures = 2; 
}

message WalletAddrWrapper {
	string walletAddr = 1;
}

message Empty {}

